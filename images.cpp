#include "optiLoader.h"

// http://www.engbedded.com/fusecalc/ is good for figuring out fuses.
// Optiboot is {0x3F, 0xFF, 0xDE, 0x05}
// Adaboot is {0x3F, 0xFF, 0xDA, 0x05}
imageDesc_t image_328 PROGMEM = {
  {"optiboot_atmega328.hex"},
  {"atmega328"},
  0x9514,  // Signature bytes for 328 non-P
  {0x3F, 0xFF, 0xDE, 0x05},  // pre program fuses (prot/lock, low, high, ext)
  {0x0F, 0x0, 0x0, 0x0},  // post program fuses
  {0x3F, 0xFF, 0xFF, 0x07},  // fuse mask
  32768,  // size of chip flash in bytes
  128,  // size in bytes of flash page
  &image_328
};

imageDesc_t image_328p PROGMEM = {
  {"optiboot_atmega328.hex"},
  {"atmega328p"},
  0x950F,  // Signature bytes for 328P
  {0x3F, 0xFF, 0xDE, 0x05},  // pre program fuses (prot/lock, low, high, ext)
  {0x0F, 0x0, 0x0, 0x0},  // post program fuses
  {0x3F, 0xFF, 0xFF, 0x07},  // fuse mask
  32768,  // size of chip flash in bytes
  128,  // size in bytes of flash page
  &image_328
};

//
// image_328
//
image_t image_328 PROGMEM = {
  {
    // octet representation of optiboot_atmega328.hex.
    0x10, 0x7E, 0x00, 0x00, 0x11, 0x24, 0x84, 0xB7, 0x14, 0xBE, 0x81, 0xFF, 0xF0, 0xD0, 0x85, 0xE0, 0x80, 0x93, 0x81, 0x00, 0xF7,
    0x10, 0x7E, 0x10, 0x00, 0x82, 0xE0, 0x80, 0x93, 0xC0, 0x00, 0x88, 0xE1, 0x80, 0x93, 0xC1, 0x00, 0x86, 0xE0, 0x80, 0x93, 0x77,
    0x10, 0x7E, 0x20, 0x00, 0xC2, 0x00, 0x80, 0xE1, 0x80, 0x93, 0xC4, 0x00, 0x8E, 0xE0, 0xC9, 0xD0, 0x25, 0x9A, 0x86, 0xE0, 0x2C,
    0x10, 0x7E, 0x30, 0x00, 0x20, 0xE3, 0x3C, 0xEF, 0x91, 0xE0, 0x30, 0x93, 0x85, 0x00, 0x20, 0x93, 0x84, 0x00, 0x96, 0xBB, 0xD3,
    0x10, 0x7E, 0x40, 0x00, 0xB0, 0x9B, 0xFE, 0xCF, 0x1D, 0x9A, 0xA8, 0x95, 0x81, 0x50, 0xA9, 0xF7, 0xCC, 0x24, 0xDD, 0x24, 0xC4,
    0x10, 0x7E, 0x50, 0x00, 0x88, 0x24, 0x83, 0x94, 0xB5, 0xE0, 0xAB, 0x2E, 0xA1, 0xE1, 0x9A, 0x2E, 0xF3, 0xE0, 0xBF, 0x2E, 0xE7,
    0x10, 0x7E, 0x60, 0x00, 0xA2, 0xD0, 0x81, 0x34, 0x61, 0xF4, 0x9F, 0xD0, 0x08, 0x2F, 0xAF, 0xD0, 0x02, 0x38, 0x11, 0xF0, 0x36,
    0x10, 0x7E, 0x70, 0x00, 0x01, 0x38, 0x11, 0xF4, 0x84, 0xE0, 0x01, 0xC0, 0x83, 0xE0, 0x8D, 0xD0, 0x89, 0xC0, 0x82, 0x34, 0xE0,
    0x10, 0x7E, 0x80, 0x00, 0x11, 0xF4, 0x84, 0xE1, 0x03, 0xC0, 0x85, 0x34, 0x19, 0xF4, 0x85, 0xE0, 0xA6, 0xD0, 0x80, 0xC0, 0xE4,
    0x10, 0x7E, 0x90, 0x00, 0x85, 0x35, 0x79, 0xF4, 0x88, 0xD0, 0xE8, 0x2E, 0xFF, 0x24, 0x85, 0xD0, 0x08, 0x2F, 0x10, 0xE0, 0xAE,
    0x10, 0x7E, 0xA0, 0x00, 0x10, 0x2F, 0x00, 0x27, 0x0E, 0x29, 0x1F, 0x29, 0x00, 0x0F, 0x11, 0x1F, 0x8E, 0xD0, 0x68, 0x01, 0xE7,
    0x10, 0x7E, 0xB0, 0x00, 0x6F, 0xC0, 0x86, 0x35, 0x21, 0xF4, 0x84, 0xE0, 0x90, 0xD0, 0x80, 0xE0, 0xDE, 0xCF, 0x84, 0x36, 0x38,
    0x10, 0x7E, 0xC0, 0x00, 0x09, 0xF0, 0x40, 0xC0, 0x70, 0xD0, 0x6F, 0xD0, 0x08, 0x2F, 0x6D, 0xD0, 0x80, 0xE0, 0xC8, 0x16, 0x88,
    0x10, 0x7E, 0xD0, 0x00, 0x80, 0xE7, 0xD8, 0x06, 0x18, 0xF4, 0xF6, 0x01, 0xB7, 0xBE, 0xE8, 0x95, 0xC0, 0xE0, 0xD1, 0xE0, 0x17,
    0x10, 0x7E, 0xE0, 0x00, 0x62, 0xD0, 0x89, 0x93, 0x0C, 0x17, 0xE1, 0xF7, 0xF0, 0xE0, 0xCF, 0x16, 0xF0, 0xE7, 0xDF, 0x06, 0xD8,
    0x10, 0x7E, 0xF0, 0x00, 0x18, 0xF0, 0xF6, 0x01, 0xB7, 0xBE, 0xE8, 0x95, 0x68, 0xD0, 0x07, 0xB6, 0x00, 0xFC, 0xFD, 0xCF, 0xD4,
    0x10, 0x7F, 0x00, 0x00, 0xA6, 0x01, 0xA0, 0xE0, 0xB1, 0xE0, 0x2C, 0x91, 0x30, 0xE0, 0x11, 0x96, 0x8C, 0x91, 0x11, 0x97, 0x80,
    0x10, 0x7F, 0x10, 0x00, 0x90, 0xE0, 0x98, 0x2F, 0x88, 0x27, 0x82, 0x2B, 0x93, 0x2B, 0x12, 0x96, 0xFA, 0x01, 0x0C, 0x01, 0x60,
    0x10, 0x7F, 0x20, 0x00, 0x87, 0xBE, 0xE8, 0x95, 0x11, 0x24, 0x4E, 0x5F, 0x5F, 0x4F, 0xF1, 0xE0, 0xA0, 0x38, 0xBF, 0x07, 0x90,
    0x10, 0x7F, 0x30, 0x00, 0x51, 0xF7, 0xF6, 0x01, 0xA7, 0xBE, 0xE8, 0x95, 0x07, 0xB6, 0x00, 0xFC, 0xFD, 0xCF, 0x97, 0xBE, 0x46,
    0x10, 0x7F, 0x40, 0x00, 0xE8, 0x95, 0x26, 0xC0, 0x84, 0x37, 0xB1, 0xF4, 0x2E, 0xD0, 0x2D, 0xD0, 0xF8, 0x2E, 0x2B, 0xD0, 0x52,
    0x10, 0x7F, 0x50, 0x00, 0x3C, 0xD0, 0xF6, 0x01, 0xEF, 0x2C, 0x8F, 0x01, 0x0F, 0x5F, 0x1F, 0x4F, 0x84, 0x91, 0x1B, 0xD0, 0x97,
    0x10, 0x7F, 0x60, 0x00, 0xEA, 0x94, 0xF8, 0x01, 0xC1, 0xF7, 0x08, 0x94, 0xC1, 0x1C, 0xD1, 0x1C, 0xFA, 0x94, 0xCF, 0x0C, 0x13,
    0x10, 0x7F, 0x70, 0x00, 0xD1, 0x1C, 0x0E, 0xC0, 0x85, 0x37, 0x39, 0xF4, 0x28, 0xD0, 0x8E, 0xE1, 0x0C, 0xD0, 0x85, 0xE9, 0xAC,
    0x10, 0x7F, 0x80, 0x00, 0x0A, 0xD0, 0x8F, 0xE0, 0x7A, 0xCF, 0x81, 0x35, 0x11, 0xF4, 0x88, 0xE0, 0x18, 0xD0, 0x1D, 0xD0, 0x67,
    0x10, 0x7F, 0x90, 0x00, 0x80, 0xE1, 0x01, 0xD0, 0x65, 0xCF, 0x98, 0x2F, 0x80, 0x91, 0xC0, 0x00, 0x85, 0xFF, 0xFC, 0xCF, 0x94,
    0x10, 0x7F, 0xA0, 0x00, 0x90, 0x93, 0xC6, 0x00, 0x08, 0x95, 0x80, 0x91, 0xC0, 0x00, 0x87, 0xFF, 0xFC, 0xCF, 0x80, 0x91, 0x18,
    0x10, 0x7F, 0xB0, 0x00, 0xC0, 0x00, 0x84, 0xFD, 0x01, 0xC0, 0xA8, 0x95, 0x80, 0x91, 0xC6, 0x00, 0x08, 0x95, 0xE0, 0xE6, 0x48,
    0x10, 0x7F, 0xC0, 0x00, 0xF0, 0xE0, 0x98, 0xE1, 0x90, 0x83, 0x80, 0x83, 0x08, 0x95, 0xED, 0xDF, 0x80, 0x32, 0x19, 0xF0, 0x2E,
    0x10, 0x7F, 0xD0, 0x00, 0x88, 0xE0, 0xF5, 0xDF, 0xFF, 0xCF, 0x84, 0xE1, 0xDE, 0xCF, 0x1F, 0x93, 0x18, 0x2F, 0xE3, 0xDF, 0xCA,
    0x10, 0x7F, 0xE0, 0x00, 0x11, 0x50, 0xE9, 0xF7, 0xF2, 0xDF, 0x1F, 0x91, 0x08, 0x95, 0x80, 0xE0, 0xE8, 0xDF, 0xEE, 0x27, 0xF6,
    0x02, 0x7F, 0xFE, 0x00, 0x04, 0x04, 0x79,
    0x00, 0x00, 0x00, 0x01, 0xFF
  }
};

/*
 * Table of defined images
 */
// image_t* images[] = {
//   &image_328,
//   &image_328p,
// };

imageDesc_t* imageDesc[] = {
  &imageDesc_328,
  &imageDesc_328p,
}

uint8_t NUMIMAGES = 2; //sizeof(images) / sizeof(imagesDesc[0]);
